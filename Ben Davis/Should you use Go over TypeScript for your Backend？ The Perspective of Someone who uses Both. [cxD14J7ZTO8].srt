1
00:00:00,100 --> 00:00:02,482
If I had to build a brand
new app tomorrow,

2
00:00:02,494 --> 00:00:05,000
would I build my backend
in TypeScript or Go?

3
00:00:05,250 --> 00:00:09,277
The honest answer is probably a
little bit of both. Let's talk about it.

4
00:00:11,330 --> 00:00:14,257
Before I get into exactly
where I would use

5
00:00:14,282 --> 00:00:16,564
which, let's first talk
about these languages for

6
00:00:16,589 --> 00:00:18,463
backend development and
how they sort of compare.

7
00:00:18,488 --> 00:00:21,385
So starting over in the
Go world, Go is super fast

8
00:00:21,410 --> 00:00:24,984
to write, super easy to
write, super fast in runtime,

9
00:00:25,009 --> 00:00:27,381
and it is extremely
easy to vertically scale.

10
00:00:27,541 --> 00:00:29,490
The language is super
efficient, it's garbage

11
00:00:29,515 --> 00:00:32,155
collected, which TypeScript
is too, but the garbage

12
00:00:32,180 --> 00:00:33,747
collector in Go, I don't
know how they made it

13
00:00:33,772 --> 00:00:35,766
work so well, but it
works really, really well.

14
00:00:35,907 --> 00:00:38,269
So, Go is super easy
to scale vertically, which

15
00:00:38,294 --> 00:00:40,649
just means that if we
have like one CPU instance

16
00:00:40,674 --> 00:00:43,084
of it running, if we
just scale up that CPU

17
00:00:43,109 --> 00:00:47,512
to be more and more powerful, we can deal
with any amount of requests super easily.

18
00:00:47,725 --> 00:00:50,706
Go is a super efficient language,
and it's super easy to scale.

19
00:00:50,906 --> 00:00:53,542
So it's fast, scalable,
and easy to write.

20
00:00:53,554 --> 00:00:56,206
Great stuff. Now we Go
over to the TypeScript world,

21
00:00:56,400 --> 00:00:59,723
it does not scale
vertically. I know yet no.

22
00:00:59,735 --> 00:01:03,080
I'm not entertaining that
TypeScript does not scale vertically.

23
00:01:03,105 --> 00:01:05,094
Now you can make
TypeScript scale of course,

24
00:01:05,213 --> 00:01:08,380
but that is going to require
either serverless or k8s.

25
00:01:08,567 --> 00:01:10,717
And k8s are Kubernetes
that's effectively

26
00:01:10,729 --> 00:01:12,666
horizontally scaling,
which means that we're

27
00:01:12,691 --> 00:01:14,593
creating more and
more Docker images.

28
00:01:14,618 --> 00:01:17,441
So we can split these horizontally,
which means we make more

29
00:01:17,466 --> 00:01:19,732
instances of our app
versus in Go. It's really easy

30
00:01:19,757 --> 00:01:22,000
to just keep one instance
of the app and just make

31
00:01:22,001 --> 00:01:23,505
that one instance
bigger and bigger.

32
00:01:23,530 --> 00:01:26,250
So that's the sort of difference
is that in TypeScript world,

33
00:01:26,275 --> 00:01:28,270
we need to either
horizontally scale or we need

34
00:01:28,295 --> 00:01:30,367
to scale via serverless
or something like that.

35
00:01:30,574 --> 00:01:34,000
Then in TypeScript, we're going to
get solid performance. I mean, it's not

36
00:01:34,300 --> 00:01:37,165
groundbreaking, not
super fast, certainly much,

37
00:01:37,190 --> 00:01:39,498
much slower than Go and
much less efficient than Go,

38
00:01:39,523 --> 00:01:41,437
but it's still Good
enough performance that

39
00:01:41,462 --> 00:01:43,159
especially if you're
really just only doing

40
00:01:43,184 --> 00:01:44,989
IO type stuff, you're
never going to feel it.

41
00:01:45,001 --> 00:01:46,880
If you're just reading and
writing from a database,

42
00:01:46,905 --> 00:01:49,309
TypeScript is print
plenty, plenty fast, and

43
00:01:49,334 --> 00:01:51,163
there's no issues. But
when you get into more

44
00:01:51,188 --> 00:01:53,529
complicated CPU heavy
stuff, you're going to want

45
00:01:53,554 --> 00:01:56,000
to be using Go. Now also
in the TypeScript world,

46
00:01:56,001 --> 00:01:57,644
it is super, super
easy to write.

47
00:01:57,669 --> 00:02:00,000
I think both of these languages
are pretty easy to write,

48
00:02:00,001 --> 00:02:02,031
but I think TypeScript
is even more intuitive to

49
00:02:02,043 --> 00:02:04,612
write than Go. Go has
some little quirks to it

50
00:02:04,637 --> 00:02:07,447
that are kind of weird and
TypeScript is pretty much

51
00:02:07,472 --> 00:02:09,453
become the dominant
language for borderline

52
00:02:09,478 --> 00:02:12,020
everything at this point,
frontend and backend

53
00:02:12,032 --> 00:02:15,000
for better for worse,
JavaScript is everywhere.

54
00:02:15,001 --> 00:02:17,540
So it's very easy to write
no issues, you're going

55
00:02:17,552 --> 00:02:19,516
to have no issues hiring
for anything like that.

56
00:02:19,909 --> 00:02:23,273
That of course, the TypeScript
package ecosystem is pretty incredible.

57
00:02:23,426 --> 00:02:27,171
There is huge amounts of innovation happening in the TypeScript world all the time.

58
00:02:27,404 --> 00:02:34,211
Nextjs, Prisma, Remix, TRPC, all of this stuff
is constantly changing, growing, evolving,

59
00:02:34,438 --> 00:02:36,454
and you're not getting that
as much in the Go world.

60
00:02:36,479 --> 00:02:40,251
There is exciting stuff happening in
the Go world. Pocket base is super cool.

61
00:02:40,276 --> 00:02:43,557
And there's a lot of really important
stuff being built with an in Go,

62
00:02:43,569 --> 00:02:47,179
but it's not quite as
flashy and not quite as

63
00:02:47,400 --> 00:02:51,893
big and crazy and well supported as TypeScript
just because more people use TypeScript.

64
00:02:51,918 --> 00:02:54,450
Go is less popular and it's
more slept on in a lot of ways.

65
00:02:54,475 --> 00:02:56,940
So you're going to get better
support over in the TypeScript world.

66
00:02:56,965 --> 00:02:59,901
But with those two things
put next to each other,

67
00:02:59,926 --> 00:03:02,515
I mean, it seems like you can get a
little more ease of use in TypeScript,

68
00:03:02,527 --> 00:03:04,749
but on an objective level,
Go does seem better.

69
00:03:04,774 --> 00:03:06,551
It seems like you're
going to get a faster, easier

70
00:03:06,576 --> 00:03:10,163
to scale cheaper
runtime for your backend.

71
00:03:10,250 --> 00:03:13,656
So it seems like a no brainer
just use Go. But it's not that simple.

72
00:03:13,963 --> 00:03:16,000
Applications are
not built in a vacuum.

73
00:03:16,001 --> 00:03:17,282
And there's something
we need to think about

74
00:03:17,307 --> 00:03:19,197
when architecting these
things is how is this all

75
00:03:19,222 --> 00:03:21,608
going to work together.
And maybe 10 years ago,

76
00:03:21,633 --> 00:03:23,454
it would have been
really easy to just say, oh,

77
00:03:23,688 --> 00:03:25,472
just use Go if we're
just going to be sending

78
00:03:25,484 --> 00:03:27,341
requests down to a front
end on all we need to

79
00:03:27,366 --> 00:03:29,425
do is that yeah, just use
Go because we're going

80
00:03:29,450 --> 00:03:31,000
to have a client side,
we're going to have our

81
00:03:31,001 --> 00:03:32,976
client side code, which
can just make requests to

82
00:03:33,001 --> 00:03:35,561
a singular Go server. And
then we'll send it back down.

83
00:03:35,586 --> 00:03:38,403
No issues. But
things have changed.

84
00:03:38,428 --> 00:03:41,136
And we've got some crazy new
stuff over in the TypeScript world.

85
00:03:41,287 --> 00:03:48,000
Specifically, these meta frameworks, the
Nextjs, Nuxtjs, Solid start, Sveltekit,

86
00:03:48,100 --> 00:03:50,606
these frameworks
have changed the game,

87
00:03:50,631 --> 00:03:53,812
these server side rendering
TypeScript frameworks have made a

88
00:03:53,837 --> 00:03:56,461
huge difference. And I
think for me, the sort of

89
00:03:56,473 --> 00:03:59,000
draw bounding line
between these two, to be

90
00:03:59,001 --> 00:04:02,537
completely honest, is how
close do I want my backend

91
00:04:02,562 --> 00:04:05,117
to be much with how
close do I want my front

92
00:04:05,142 --> 00:04:07,938
and backend to be? Do I
want these two to be super

93
00:04:07,963 --> 00:04:10,000
interconnected? And I
want them to link borderline

94
00:04:10,001 --> 00:04:12,776
one to one, then I
want to use TypeScript.

95
00:04:12,801 --> 00:04:15,579
And if I want them to be
fairly disconnected and how my

96
00:04:15,604 --> 00:04:18,023
backend be kind of
agnostic and be able to use

97
00:04:18,035 --> 00:04:20,000
be used on any
platform or anything,

98
00:04:20,001 --> 00:04:22,820
I want it to be in Go. So
the first thing I'm going to say

99
00:04:22,845 --> 00:04:26,517
about using Go is I would
always use Go if I need a

100
00:04:26,542 --> 00:04:29,729
standalone backend.
So that means that I'm

101
00:04:29,754 --> 00:04:32,151
just spinning up a
rest API that is going to

102
00:04:32,443 --> 00:04:36,242
send and receive responses
over HTTP or create

103
00:04:36,274 --> 00:04:38,263
like a graphQL endpoint
that's going to send

104
00:04:38,288 --> 00:04:41,483
responses over the
graphQL protocol.

105
00:04:41,903 --> 00:04:45,083
So if I was creating a standalone
backend, I would do it in Go.

106
00:04:45,250 --> 00:04:47,509
For the reasons I listed
above the scalability,

107
00:04:47,589 --> 00:04:49,536
performance, all that
stuff, it just can't be beat.

108
00:04:49,682 --> 00:04:52,283
If you're not getting
huge DX improvements,

109
00:04:52,308 --> 00:04:54,482
I wouldn't do it in Go.
If you're basically just

110
00:04:54,507 --> 00:04:57,589
creating a rest API on
an objective level, Go is

111
00:04:57,614 --> 00:05:00,408
better and it's faster. And for
me, that's what I would go with.

112
00:05:01,050 --> 00:05:03,936
But you're not always going to
be creating a standalone backend.

113
00:05:04,230 --> 00:05:11,065
So when would I use TS? Well,
that would be when my frontend and

114
00:05:11,090 --> 00:05:16,000
backend are tightly
coupled. And then that is

115
00:05:16,001 --> 00:05:27,881
going to be in parentheses,
Nextjs, Nuxtjs, Sveltekit, Solid Start, etc.,

116
00:05:28,488 --> 00:05:30,000
So if I would if I

117
00:05:30,001 --> 00:05:32,009
were using one of these
frameworks, if I was using

118
00:05:32,021 --> 00:05:34,000
a meta framework, and I
was basically just wanted

119
00:05:34,001 --> 00:05:36,053
read and write out of
a user's table, I would

120
00:05:36,065 --> 00:05:38,000
use TS for my backend.
And if I was going to

121
00:05:38,001 --> 00:05:40,335
write a TS backend, I
would write it in one of

122
00:05:40,360 --> 00:05:42,128
these frameworks, these
frameworks would be my

123
00:05:42,153 --> 00:05:43,905
backend, I would not
make a separate instance

124
00:05:43,930 --> 00:05:46,205
for it, not make an Express
server, a Nest server,

125
00:05:46,230 --> 00:05:49,431
whatever, I would make
it in Next or Nuxt. So what

126
00:05:49,456 --> 00:05:51,718
do I mean by tightly
coupled? And that basically

127
00:05:51,743 --> 00:05:54,436
just means I want to
be able to call a function

128
00:05:54,448 --> 00:05:57,365
on my frontend, and
then do basically that exact

129
00:05:57,390 --> 00:05:59,803
thing on the back. So what
are some examples of this?

130
00:05:59,828 --> 00:06:02,558
A really Good one
would be just I need to

131
00:06:02,583 --> 00:06:05,952
update a user's settings.
So update user settings.

132
00:06:06,183 --> 00:06:08,124
If I want to go to my
website, and I want to go

133
00:06:08,149 --> 00:06:09,644
to their profile page,
and I want to update

134
00:06:09,669 --> 00:06:11,478
their email notifications
or something like that,

135
00:06:11,584 --> 00:06:13,408
that's tight coupling,
because I'm just going

136
00:06:13,420 --> 00:06:15,658
to be basically making
a request to an endpoint,

137
00:06:15,683 --> 00:06:17,904
that's gonna be like,
Hey, switch this update this

138
00:06:17,929 --> 00:06:20,000
and then send me back
down that did update it.

139
00:06:20,100 --> 00:06:23,128
Great. And now what I
can do is by tight coupling

140
00:06:23,153 --> 00:06:25,368
these two, I get all
the benefits of a shared

141
00:06:25,393 --> 00:06:28,058
language, which allows
me to use a framework

142
00:06:28,070 --> 00:06:31,000
like tRPC to link
between the two of them.

143
00:06:31,150 --> 00:06:33,408
Because the key here,
when we're writing our

144
00:06:33,420 --> 00:06:36,000
frontends and backends,
we have our client over here.

145
00:06:36,500 --> 00:06:45,463
So this is going to be our client. And
then over here, we have our server.

146
00:06:45,909 --> 00:06:47,869
So our client and our
server are over here.

147
00:06:48,090 --> 00:06:52,838
And in a traditional model, there's a
pretty strong line in between these two,

148
00:06:53,138 --> 00:06:56,000
especially if we're using like a
single page app or something like that,

149
00:06:56,100 --> 00:06:58,588
the client is going to send
requests over to the server, and the

150
00:06:58,600 --> 00:07:05,976
server is going to send down responses.
And this is going to be request response.

151
00:07:06,110 --> 00:07:08,290
req, res, HTTP.

152
00:07:08,910 --> 00:07:13,130
So we have one way of doing this, which is
going to be a request and response over HTTP.

153
00:07:13,223 --> 00:07:15,089
If these two are going to be
super detached, and all I was

154
00:07:15,114 --> 00:07:17,278
going to do was just
communicate between the two

155
00:07:17,303 --> 00:07:19,737
with requests and response
and HTTP, this would

156
00:07:19,762 --> 00:07:21,946
be a Go server for me,
I would want to you get

157
00:07:21,958 --> 00:07:24,000
the performance
and scalability of Go.

158
00:07:24,050 --> 00:07:28,300
But where this gets interesting is if I'm
going to be using something like tRPC.

159
00:07:28,840 --> 00:07:33,271
Now, what is tRPC, if you're not familiar
with it, this is a brand new TypeScript

160
00:07:33,296 --> 00:07:37,266
package that basically makes a
front and backend development.

161
00:07:38,519 --> 00:07:42,720
It makes full stack development stupid,
easy to do. It's become kind of the hit

162
00:07:42,745 --> 00:07:45,987
new thing online. It's gotten super popular,
super fast.

163
00:07:46,094 --> 00:07:50,111
And it allows your front and your
backend to communicate with ease.

164
00:07:50,171 --> 00:07:54,287
So it basically allows you to share
types from the front to the backend.

165
00:07:54,600 --> 00:07:58,799
So if I was going to use tRPC,
this would be pure TypeScript for me.

166
00:07:58,899 --> 00:08:04,179
Because what I can do is I can share
these types from my server to my client,

167
00:08:04,259 --> 00:08:08,133
it's all strongly typed. And
that is a super powerful thing.

168
00:08:08,187 --> 00:08:11,236
And it's absolutely something you
should look into. If you have an app

169
00:08:11,261 --> 00:08:13,300
that's not complex enough
to really need anything

170
00:08:13,325 --> 00:08:15,484
more to this, if all your
app is going to be doing

171
00:08:15,509 --> 00:08:18,264
is basically just
glorified crud, if it's like a,

172
00:08:18,510 --> 00:08:20,559
it's like an accounting
management app, you need

173
00:08:20,584 --> 00:08:23,204
to go in and you need
to read from a user's table

174
00:08:23,229 --> 00:08:25,000
and then get their profiles
out. And then you need

175
00:08:25,001 --> 00:08:27,113
to see how many accounts
they have. And then within

176
00:08:27,125 --> 00:08:29,000
these accounts, you
need to update some data,

177
00:08:29,001 --> 00:08:30,967
read some tables,
all this basic stuff.

178
00:08:30,979 --> 00:08:33,311
tRPC is going to be great
for that because they're super

179
00:08:33,336 --> 00:08:37,109
tightly coupled. And you can share
your types from the front to the backend

180
00:08:37,134 --> 00:08:40,110
and it can make full stack
development a breeze.

181
00:08:40,144 --> 00:08:44,136
It makes it super easy for anyone to
write an entire app all by themselves.

182
00:08:44,330 --> 00:08:48,368
Versus if you wanted to do versus if
you wanted to do that with like having

183
00:08:48,393 --> 00:08:50,629
a separate Go backend,
that would get a little

184
00:08:50,654 --> 00:08:52,304
harder because you're
not going to be able to

185
00:08:52,329 --> 00:08:56,404
share those types. And you're going to have
to sort of deal with things going over HTTP.

186
00:08:56,704 --> 00:08:59,088
It's hard to describe if you've
never used tRPC before

187
00:08:59,119 --> 00:09:03,112
and next week I'm going to be using it
a lot live, but definitely Go look it up.

188
00:09:03,137 --> 00:09:06,000
There's a million videos on it,
but go take a look at this and

189
00:09:06,001 --> 00:09:08,516
sort of see how you can connect
these two with strong typing.

190
00:09:08,528 --> 00:09:11,000
And when we're using these new

191
00:09:11,001 --> 00:09:13,566
frameworks like Next
and Nuxt and all this stuff,

192
00:09:13,578 --> 00:09:16,000
it's really easy to host
these in a way that we

193
00:09:16,050 --> 00:09:18,591
kind of it edges out a
lot of these issues that

194
00:09:18,616 --> 00:09:21,000
we have with typescript.
So the scalability is a

195
00:09:21,001 --> 00:09:23,057
big problem. So we need
to be using something

196
00:09:23,069 --> 00:09:25,147
like serverless. But
the platform, Vercel,

197
00:09:25,172 --> 00:09:27,271
which is where you're generally
speaking going to be hosting this,

198
00:09:27,445 --> 00:09:29,000
it's just innately serverless.

199
00:09:29,001 --> 00:09:31,302
It's going to set up and do all
the serverless config for you.

200
00:09:31,327 --> 00:09:32,687
And there's no
issues whatsoever.

201
00:09:32,894 --> 00:09:36,170
So basically, anytime
you have tight coupling

202
00:09:36,195 --> 00:09:38,692
and you can get away
with using a framework like

203
00:09:38,717 --> 00:09:40,989
Next or Nuxt, Sveltekit
or whatever for your

204
00:09:41,001 --> 00:09:43,434
entire app, do it. If you
don't need a separate

205
00:09:43,459 --> 00:09:46,394
backend, don't make
one. Now I know this sounds

206
00:09:46,419 --> 00:09:49,218
like I'm ragging on Go.
And yeah, I do really

207
00:09:49,243 --> 00:09:52,100
like Go. And in my case,
for Insiderwiz, I use

208
00:09:52,125 --> 00:09:54,780
both typescript and Go
for my backend. I have,

209
00:09:54,805 --> 00:09:57,201
on a real live app right
here, this is running

210
00:09:57,226 --> 00:09:59,835
both typescript and Go.
And the reason for that

211
00:09:59,915 --> 00:10:01,967
is because the tightly
coupled stuff, which is

212
00:10:02,110 --> 00:10:04,487
going to be my user
management, my subscription

213
00:10:04,512 --> 00:10:07,071
management, my like
basic stuff in my database,

214
00:10:07,284 --> 00:10:10,548
that is all going to be managed
with Typescript and Nextjs.

215
00:10:10,573 --> 00:10:12,318
So I have a Nextjs
server doing all that.

216
00:10:12,389 --> 00:10:16,219
It makes it really easy. But then if I
want to deal with more complicated stuff,

217
00:10:16,244 --> 00:10:19,294
that's more detached, that doesn't
really care about my application state,

218
00:10:19,437 --> 00:10:24,000
then I use Go, I use Go for the API
that manages all of this form data,

219
00:10:24,001 --> 00:10:27,078
all this stuff, all the financial
data you see on the site,

220
00:10:27,103 --> 00:10:30,326
I use Go because I need higher
performance to deal with this massive,

221
00:10:30,351 --> 00:10:33,000
these massive quantities
of data and all that stuff.

222
00:10:33,150 --> 00:10:35,038
So really, I think
where this comes in is

223
00:10:35,050 --> 00:10:37,055
first of all, I would use Go
and a standalone backend.

224
00:10:37,300 --> 00:10:39,306
Second of all, I would
use it in a place where

225
00:10:39,331 --> 00:10:43,391
performance matters,
where each request is going

226
00:10:43,416 --> 00:10:46,577
to have heavy CPU compute
and stuff like concurrency

227
00:10:46,602 --> 00:10:49,580
and yeah, stuff like
concurrency actually starts

228
00:10:49,605 --> 00:10:51,844
to matter. If that doesn't
matter to your app, if

229
00:10:51,869 --> 00:10:54,608
again, if you're just reading and
writing out of a user table or something,

230
00:10:54,799 --> 00:10:58,000
then just use a typescript app.
But if you want to use something

231
00:10:58,001 --> 00:10:59,964
more performant, you
need to do something

232
00:10:59,976 --> 00:11:02,000
a little crazier, which
in the real world,

233
00:11:02,100 --> 00:11:05,068
you probably will more
often than not, a real app

234
00:11:05,080 --> 00:11:07,634
is going to end up needing
something this crazy,

235
00:11:07,794 --> 00:11:09,880
it's going to need something
more serious, you're going to get

236
00:11:09,920 --> 00:11:11,760
beyond just crud in a to-do app.

237
00:11:12,100 --> 00:11:15,462
That's when languages like Go
start to become really valuable.

238
00:11:15,711 --> 00:11:19,211
When things go beyond just the trivial
reading and writing out of a database,

239
00:11:19,428 --> 00:11:21,000
that's when I would
move over to here.

240
00:11:21,150 --> 00:11:23,063
So hopefully that answers
the question on where

241
00:11:23,075 --> 00:11:25,625
I would use which. I know
this was all over the place,

242
00:11:25,650 --> 00:11:29,290
which is unfortunate,
but this is kind of a hard

243
00:11:29,503 --> 00:11:32,666
topic to structure because
this is very much a feel thing.

244
00:11:32,691 --> 00:11:36,000
Telling you when and where to
use something is a hard thing to do.

245
00:11:36,001 --> 00:11:39,329
It's hard to intelligently
and clearly not.

246
00:11:39,778 --> 00:11:43,000
I don't want to just lead you
astray on this and just be like,

247
00:11:43,100 --> 00:11:45,554
give you a definitive,
always use this, always use that.

248
00:11:45,579 --> 00:11:47,420
But then when you
don't give a definitive,

249
00:11:47,445 --> 00:11:49,806
it gets kind of wishy-washy
because I'm well,

250
00:11:49,831 --> 00:11:52,598
basically my thesis is,
well, they're both good,

251
00:11:52,623 --> 00:11:54,880
you know, just use what
you think you should use.

252
00:11:54,905 --> 00:11:56,742
But that doesn't
mean anything until you

253
00:11:56,767 --> 00:11:59,384
have the experience
with it. So I think what I

254
00:11:59,396 --> 00:12:02,202
would do is I would look
at really give TypeScript

255
00:12:02,227 --> 00:12:05,693
a shot, see how all of these
frameworks work and all this stuff.

256
00:12:05,946 --> 00:12:10,163
And then once you've understood that,
then when you need something that's more

257
00:12:10,188 --> 00:12:12,381
standalone and you need
that higher performance,

258
00:12:12,406 --> 00:12:13,558
go into the Go world.

259
00:12:13,754 --> 00:12:17,055
Now, if you're not a full stack
developer and you just need to be making

260
00:12:17,080 --> 00:12:19,348
APIs and you don't care
at all about the frontend

261
00:12:19,373 --> 00:12:21,000
and it needs to be
completely agnostic,

262
00:12:21,025 --> 00:12:23,193
then I would look at Go
because there's no real

263
00:12:23,218 --> 00:12:25,106
reason to bottleneck
yourself with TypeScript

264
00:12:25,375 --> 00:12:27,505
if you're not going to
get benefits out of sharing

265
00:12:27,530 --> 00:12:29,865
types between the front and
the backend and all that stuff.

266
00:12:30,047 --> 00:12:31,815
If sharing code isn't
going to help you,

267
00:12:31,840 --> 00:12:35,425
then don't do it. So
again, hopefully that helps.

268
00:12:35,450 --> 00:12:38,663
If you enjoyed, make sure that
you like, subscribe, do all that stuff,

269
00:12:38,721 --> 00:12:42,077
got brand new stuff coming all
the way through the 28th of February

270
00:12:42,102 --> 00:12:46,159
every single day. And
yeah, that's about it.

271
00:12:46,275 --> 00:12:46,923
Have a great day.

